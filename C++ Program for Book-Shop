#include <iostream>
#include <vector>
#include <string>

class Book {
public:
    std::string title;
    std::string author;
    double price;
    int quantity;

    Book(std::string t, std::string a, double p, int q)
        : title(t), author(a), price(p), quantity(q) {
    }
    //~Book() {
    //    std::cout << "Book deleted: " << title << std::endl;
   // }

};

class BookStore {
private:
    std::vector<Book> inventory;

public:
    void addBook() {
        std::string title, author;
        double price;
        int quantity;

        std::cout << "enter book title: ";
        std::cin.ignore(); 
        std::getline(std::cin, title);
        std::cout << "enter book author: ";
        std::getline(std::cin, author);
        std::cout << "enter price: ";
        std::cin >> price;
        std::cout << "enter  quantity: ";
        std::cin >> quantity;

        inventory.emplace_back(title, author, price, quantity);
        std::cout << "Updated list.\n";
    }

    void editBook() {
        std::string title;
        std::cout << "enter book title: ";
        std::cin.ignore();
        std::getline(std::cin, title);

        for (auto& book : inventory) {
            if (book.title == title) {
                std::cout << "enter new title: ";
                std::string newTitle;
                std::getline(std::cin, newTitle);
                if (!newTitle.empty()) book.title = newTitle;

                std::cout << "enter new author: ";
                std::string newAuthor;
                std::getline(std::cin, newAuthor);
                if (!newAuthor.empty()) book.author = newAuthor;

                std::cout << "enter new price: ";
                std::string priceInput;
                std::getline(std::cin, priceInput);
                if (!priceInput.empty()) book.price = std::stod(priceInput);

                std::cout << "enter new quantity: ";
                std::string quantityInput;
                std::getline(std::cin, quantityInput);
                if (!quantityInput.empty()) book.quantity = std::stoi(quantityInput);

                std::cout << "book info updated.\n";
                return;
            }
        }
        std::cout << "not found.\n";
    }

    void buyBook() {
        std::string title;
        std::cout << "enter title: ";
        std::cin.ignore();
        std::getline(std::cin, title);

        for (auto& book : inventory) {
            if (book.title == title) {
                if (book.quantity > 0) {
                    book.quantity--;
                    std::cout << "buing book: " << book.title << ". ostalos: " << book.quantity << " chtook.\n";
                    return;
                }
                else {
                    std::cout << "not enough book.\n";
                    return;
                }
            }
        }
        std::cout << "not found\n";
    }

    void showInventory() {
        std::cout << "\nBook List:\n";
        for (const auto& book : inventory) {
            std::cout << "title: " << book.title
                << ", author: " << book.author
                << ", price: " << book.price
                << ", Ðšquantity: " << book.quantity << std::endl;
        }
        std::cout << std::endl;
    }
};

int main() {
    BookStore store;
    int choice;
    bool online = true;

    while (online) {
        std::cout << " ---- C++ Program for Book-Shop ---- " << std::endl;
        std::cout << "enter '1' to add new book" << std::endl;
        std::cout << "enter '2' to edit information about the book" << std::endl;
        std::cout << "enter '3' to buy the book" << std::endl;
        std::cout << "enter '4' to show books" << std::endl;
        std::cout << "enter '5' to exit" << std::endl;
        std::cin >> choice;
        std::cin.ignore();

        switch (choice) {
        case 1:
            store.addBook();
            break;
        case 2:
            store.editBook();
            break;
        case 3:
            store.buyBook();
            break;
        case 4:
            store.showInventory();
            break;
        case 5:
            online = false;
            break;
        default:
            
            std::cout << "incorected values!\n";
        }
    }

    return 0;
}
