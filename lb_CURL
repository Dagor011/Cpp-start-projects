#include <iostream>
#include <fstream>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <curl/curl.h>

std::ofstream trafficLog("traffic_log.txt");



void packetHandler(u_char* args, const struct pcap_pkthdr* header, const u_char* packet){

struct ip* ipHeader = (struct ip*)(packet + 14);


trafficLog << "Captured packet:" << header->len << "bytes" << std::endl;
trafficLog << "Source IP:" << inet_ntoa(ipHeader->ip_src) << std::endl;
trafficLog << "Destenation IP:" << inet_ntoa(ipHeader->ip_dst) << std::endl;


switch (ipHeader->ip_p){
	case IPPROTO_TCP:
		trafficLog << "protocol: TCP" << std::endl;
		break;
	case IPPROTO_UDP:
		trafficLog << "Protocol: UDP" << std::endl;
		break;
	deafult:
		trafficLog << "Protocol: other" << std::endl;
		break;
	}

	trafficLog << std::endl;

}

void sendEmail(const std::string& filename){
CURL* curl;
CURLcode res;

curl = curl_easy_init();
if(curl){
	struct curl_slist* recipients = nullptr;
	
	curl_easy_setopt(curl, CURLOPT_URL, "smtp://smtp.mail.ru");
	curl_easy_setopt(curl, CURLOPT_PORT, 465);	
	curl_easy_setopt(curl, CURLOPT_USERNAME, "shutkin.pasha@inbox.ru");
	curl_easy_setopt(curl, CURLOPT_PASSWORD, "GeforceRTX2060");
	

	curl_easy_setopt(curl, CURLOPT_MAIL_FROM, "<shutkin.pasha@inbox.ru>");
	recipients = curl_slist_append(recipients, "<a.v.shutkin@inbox.ru>");
	curl_easy_setopt(curl, CURLOPT_MAIL_RCPT, recipients);

	curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);
	FILE* file = fopen(filename.c_str(), "rb");
	curl_easy_setopt(curl, CURLOPT_READDATA, file);
	curl_easy_setopt(curl, CURLOPT_USE_SSL, CURLUSESSL_ALL);
	
	res = curl_easy_perform(curl);
	if(res != CURLE_OK){
		std::cerr << "Email sending failed: " << curl_easy_strerror(res) << std::endl;
	}

	fclose(file);
	curl_slist_free_all(recipients);
	curl_easy_cleanup(curl);
   }
}

int main(){
char errbuf[PCAP_ERRBUF_SIZE];
pcap_if_t* allDevs;

if(pcap_findalldevs(&allDevs, errbuf) == -1){
	std::cerr << "Error finding devices:" << errbuf << std::endl;
	return 1;	
}

std::cout << "available devices:" << std::endl;
for(pcap_if_t* dev = allDevs; dev != nullptr; dev=dev->next){
	std::cout << dev->name << std::endl;
}

pcap_t* handle = pcap_open_live(allDevs->name, BUFSIZ, 1, 1000, errbuf);
if(handle == nullptr){
	std::cerr << "error opening" << errbuf << std::endl;
	return 1;
}


pcap_loop(handle, 10 , packetHandler, nullptr);

pcap_close(handle);
pcap_freealldevs(allDevs);

trafficLog.close();

sendEmail("traffic_lox.txt");

return 0;
}
